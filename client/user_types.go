// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "user": Application User Types
//
// Command:
// $ goagen
// --design=github.com/JormungandrK/microservice-registration/design
// --out=$(GOPATH)/src/github.com/JormungandrK/microservice-registration
// --version=v1.3.0

package client

import (
	"github.com/goadesign/goa"
	"unicode/utf8"
)

// UserPayload
type userPayload struct {
	// Status of user account
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// External id of user
	ExternalID *string `form:"externalId,omitempty" json:"externalId,omitempty" xml:"externalId,omitempty"`
	// Full name of user
	Fullname *string `form:"fullname,omitempty" json:"fullname,omitempty" xml:"fullname,omitempty"`
	// Password of user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Roles of user
	Roles []string `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
	// Name of user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Finalize sets the default values for userPayload type instance.
func (ut *userPayload) Finalize() {
	var defaultActive = false
	if ut.Active == nil {
		ut.Active = &defaultActive
	}
}

// Validate validates the userPayload type instance.
func (ut *userPayload) Validate() (err error) {
	if ut.Fullname == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "fullname"))
	}
	if ut.Username == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "username"))
	}
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Roles == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "roles"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Fullname != nil {
		if ok := goa.ValidatePattern(`^([a-zA-Z0-9 ]{4,30})$`, *ut.Fullname); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.fullname`, *ut.Fullname, `^([a-zA-Z0-9 ]{4,30})$`))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 6, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 30, false))
		}
	}
	if ut.Username != nil {
		if utf8.RuneCountInString(*ut.Username) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.username`, *ut.Username, utf8.RuneCountInString(*ut.Username), 4, true))
		}
	}
	if ut.Username != nil {
		if utf8.RuneCountInString(*ut.Username) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.username`, *ut.Username, utf8.RuneCountInString(*ut.Username), 50, false))
		}
	}
	return
}

// Publicize creates UserPayload from userPayload
func (ut *userPayload) Publicize() *UserPayload {
	var pub UserPayload
	if ut.Active != nil {
		pub.Active = *ut.Active
	}
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.ExternalID != nil {
		pub.ExternalID = ut.ExternalID
	}
	if ut.Fullname != nil {
		pub.Fullname = *ut.Fullname
	}
	if ut.Password != nil {
		pub.Password = ut.Password
	}
	if ut.Roles != nil {
		pub.Roles = ut.Roles
	}
	if ut.Username != nil {
		pub.Username = *ut.Username
	}
	return &pub
}

// UserPayload
type UserPayload struct {
	// Status of user account
	Active bool `form:"active" json:"active" xml:"active"`
	// Email of user
	Email string `form:"email" json:"email" xml:"email"`
	// External id of user
	ExternalID *string `form:"externalId,omitempty" json:"externalId,omitempty" xml:"externalId,omitempty"`
	// Full name of user
	Fullname string `form:"fullname" json:"fullname" xml:"fullname"`
	// Password of user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Roles of user
	Roles []string `form:"roles" json:"roles" xml:"roles"`
	// Name of user
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate validates the UserPayload type instance.
func (ut *UserPayload) Validate() (err error) {
	if ut.Fullname == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "fullname"))
	}
	if ut.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "username"))
	}
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Roles == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "roles"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if ok := goa.ValidatePattern(`^([a-zA-Z0-9 ]{4,30})$`, ut.Fullname); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.fullname`, ut.Fullname, `^([a-zA-Z0-9 ]{4,30})$`))
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 6, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 30, false))
		}
	}
	if utf8.RuneCountInString(ut.Username) < 4 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.username`, ut.Username, utf8.RuneCountInString(ut.Username), 4, true))
	}
	if utf8.RuneCountInString(ut.Username) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.username`, ut.Username, utf8.RuneCountInString(ut.Username), 50, false))
	}
	return
}
